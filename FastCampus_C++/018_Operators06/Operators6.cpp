/*-----------------------------------------------------------------------------
 * Name: Operators6 - 비트 연산자(bitwise operator)
 * DESC: 연산자(&, |, ^, ~, <<, >>) - 비교 연산자와 결합해서 사용
 * 정수 혹은 정수로 변환 가능한 타입만 가능
 * 2진수로 연산(최소 단위인 0, 1로 표현)
 * 메모리 효율적 사용, 빠른 연산 속도, 네트워크에서 자주 사용
 * bool형 데이터에 사용하는 경우 효율적 사용
-----------------------------------------------------------------------------*/

#include <iostream>
#include <bitset>

using namespace std;

int main()
{
	unsigned char x = 5; //0000 0101
	unsigned char y = 1; //0000 0001

	cout << "x: " << (int)x << " =>  2진수:" << bitset<8>(x) << endl;

	unsigned int result = 0;
	result = x & y;
	cout << "x & y = 10진수: " << (int)result << " =>  2진수:" << bitset<8>(result) << endl;

	result = x | y;
	cout << "x | y = 10진수: " << (int)result << " =>  2진수:" << bitset<8>(result) << endl;

	result = x ^ y;
	cout << "x ^ y = 10진수: " << (int)result << " =>  2진수:" << bitset<8>(result) << endl;

	result = ~x;
	cout << "~x = 10진수: " << (int)result << " =>  2진수:" << bitset<8>(result) << endl;

	result = ~y;
	cout << "~y = 10진수: " << (int)result << " =>  2진수:" << bitset<8>(result) << endl;

	result = x >> 1; //1비트씩 오른쪽으로 이동하는 경우 2배씩 감소
	cout << "x >> 1 = 10진수: " << (int)result << " =>  2진수:" << bitset<8>(result) << endl;

	result = x << 1; //1비트씩 왼쪽으로 이동하는 경우 2배씩 증가
	cout << "x << 1 = 10진수: " << (int)result << " =>  2진수:" << bitset<8>(result) << endl;

	return 0;
}

//비트 연산자
//&: 비트 AND연산 
//|: 비트 OR연산 
//^: 비트 XOR연산 - 두 비트가 서로 다르면 1, 같으면 0
//~: 비트 NOT연산 - 비트가 1이면 0으로, 0이면 1로
//<<, >>: 비트 Shift연산 -지정된 수만큼 왼쪽, 오른쪽으로 비트 이동

//┌─────┬──────────┬──────────┐ 
//│  X  │0000 0101 │ 0000 1010│	
//├─────┼──────────┼──────────┤ 
//│  Y  │0000 0001 │ 0000 1111│
//├─────┼──────────┼──────────┤
//│X & B|0000 0001 │ 0000 1010│
//└─────┴──────────┴──────────┘ 

//┌─────┬──────────┬──────────┐ 
//│  X  │0000 0101 │ 0000 1010│	
//├─────┼──────────┼──────────┤ 
//│  Y  │0000 0001 │ 0000 1111│
//├─────┼──────────┼──────────┤
//│X | B│0000 0101 │ 0000 1111│
//└─────┴──────────┴──────────┘ 

//┌─────┬──────────┬──────────┐ 
//│  X  │0000 0101 │ 0000 1010│	
//├─────┼──────────┼──────────┤ 
//│  Y  │0000 0001 │ 0000 1111│
//├─────┼──────────┼──────────┤
//│X ^ B│0000 0100 │ 0000 0101│
//└─────┴──────────┴──────────┘ 

//┌─────┬──────────┬──────────┐ 
//│  X  │0000 0101 │ 0000 1010│	
//├─────┼──────────┼──────────┤ 
//│ ~X  │1111 1010 │ 1111 0101│
//├─────┼──────────┼──────────┤
//│  Y  │0000 0001 │ 0000 1111│
//├─────┼──────────┼──────────┤
//│ ~Y  │1111 1110 │ 1111 0000│
//└─────┴──────────┴──────────┘ 

//┌─────┬──────────┬──────────┐ 
//│  X  │0000 0101 │ 0000 1010│	
//├─────┼──────────┼──────────┤
//│ X>>1│0000 0010 │ 0000 0101│
//├─────┼──────────┼──────────┤
//│  X  │0000 0101 │ 0000 1010│
//├─────┼──────────┼──────────┤
//│ X<<1│0000 1010 │ 0001 0100│
//└─────┴──────────┴──────────┘  